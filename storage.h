/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Storage_H
#define Storage_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "storage_service_types.h"

namespace storage_service {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class StorageIf {
 public:
  virtual ~StorageIf() {}
  virtual void insert(const std::string& key, const std::string& val) = 0;
  virtual void update_by_key(const std::string& key, const std::string& val) = 0;
  virtual void delete_by_key(const std::string& key) = 0;
  virtual void find_by_key(std::string& _return, const std::string& key) = 0;
  virtual void dump(const std::string& file_name) = 0;
  virtual void load(const std::string& file_name) = 0;
};

class StorageIfFactory {
 public:
  typedef StorageIf Handler;

  virtual ~StorageIfFactory() {}

  virtual StorageIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(StorageIf* /* handler */) = 0;
  };

class StorageIfSingletonFactory : virtual public StorageIfFactory {
 public:
  StorageIfSingletonFactory(const ::std::shared_ptr<StorageIf>& iface) : iface_(iface) {}
  virtual ~StorageIfSingletonFactory() {}

  virtual StorageIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(StorageIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<StorageIf> iface_;
};

class StorageNull : virtual public StorageIf {
 public:
  virtual ~StorageNull() {}
  void insert(const std::string& /* key */, const std::string& /* val */) override {
    return;
  }
  void update_by_key(const std::string& /* key */, const std::string& /* val */) override {
    return;
  }
  void delete_by_key(const std::string& /* key */) override {
    return;
  }
  void find_by_key(std::string& /* _return */, const std::string& /* key */) override {
    return;
  }
  void dump(const std::string& /* file_name */) override {
    return;
  }
  void load(const std::string& /* file_name */) override {
    return;
  }
};

typedef struct _Storage_insert_args__isset {
  _Storage_insert_args__isset() : key(false), val(false) {}
  bool key :1;
  bool val :1;
} _Storage_insert_args__isset;

class Storage_insert_args {
 public:

  Storage_insert_args(const Storage_insert_args&);
  Storage_insert_args& operator=(const Storage_insert_args&);
  Storage_insert_args() noexcept
                      : key(),
                        val() {
  }

  virtual ~Storage_insert_args() noexcept;
  std::string key;
  std::string val;

  _Storage_insert_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_val(const std::string& val);

  bool operator == (const Storage_insert_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(val == rhs.val))
      return false;
    return true;
  }
  bool operator != (const Storage_insert_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Storage_insert_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Storage_insert_pargs {
 public:


  virtual ~Storage_insert_pargs() noexcept;
  const std::string* key;
  const std::string* val;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Storage_insert_result {
 public:

  Storage_insert_result(const Storage_insert_result&) noexcept;
  Storage_insert_result& operator=(const Storage_insert_result&) noexcept;
  Storage_insert_result() noexcept {
  }

  virtual ~Storage_insert_result() noexcept;

  bool operator == (const Storage_insert_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Storage_insert_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Storage_insert_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Storage_insert_presult {
 public:


  virtual ~Storage_insert_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Storage_update_by_key_args__isset {
  _Storage_update_by_key_args__isset() : key(false), val(false) {}
  bool key :1;
  bool val :1;
} _Storage_update_by_key_args__isset;

class Storage_update_by_key_args {
 public:

  Storage_update_by_key_args(const Storage_update_by_key_args&);
  Storage_update_by_key_args& operator=(const Storage_update_by_key_args&);
  Storage_update_by_key_args() noexcept
                             : key(),
                               val() {
  }

  virtual ~Storage_update_by_key_args() noexcept;
  std::string key;
  std::string val;

  _Storage_update_by_key_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_val(const std::string& val);

  bool operator == (const Storage_update_by_key_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(val == rhs.val))
      return false;
    return true;
  }
  bool operator != (const Storage_update_by_key_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Storage_update_by_key_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Storage_update_by_key_pargs {
 public:


  virtual ~Storage_update_by_key_pargs() noexcept;
  const std::string* key;
  const std::string* val;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Storage_update_by_key_result {
 public:

  Storage_update_by_key_result(const Storage_update_by_key_result&) noexcept;
  Storage_update_by_key_result& operator=(const Storage_update_by_key_result&) noexcept;
  Storage_update_by_key_result() noexcept {
  }

  virtual ~Storage_update_by_key_result() noexcept;

  bool operator == (const Storage_update_by_key_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Storage_update_by_key_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Storage_update_by_key_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Storage_update_by_key_presult {
 public:


  virtual ~Storage_update_by_key_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Storage_delete_by_key_args__isset {
  _Storage_delete_by_key_args__isset() : key(false) {}
  bool key :1;
} _Storage_delete_by_key_args__isset;

class Storage_delete_by_key_args {
 public:

  Storage_delete_by_key_args(const Storage_delete_by_key_args&);
  Storage_delete_by_key_args& operator=(const Storage_delete_by_key_args&);
  Storage_delete_by_key_args() noexcept
                             : key() {
  }

  virtual ~Storage_delete_by_key_args() noexcept;
  std::string key;

  _Storage_delete_by_key_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const Storage_delete_by_key_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const Storage_delete_by_key_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Storage_delete_by_key_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Storage_delete_by_key_pargs {
 public:


  virtual ~Storage_delete_by_key_pargs() noexcept;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Storage_delete_by_key_result {
 public:

  Storage_delete_by_key_result(const Storage_delete_by_key_result&) noexcept;
  Storage_delete_by_key_result& operator=(const Storage_delete_by_key_result&) noexcept;
  Storage_delete_by_key_result() noexcept {
  }

  virtual ~Storage_delete_by_key_result() noexcept;

  bool operator == (const Storage_delete_by_key_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Storage_delete_by_key_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Storage_delete_by_key_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Storage_delete_by_key_presult {
 public:


  virtual ~Storage_delete_by_key_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Storage_find_by_key_args__isset {
  _Storage_find_by_key_args__isset() : key(false) {}
  bool key :1;
} _Storage_find_by_key_args__isset;

class Storage_find_by_key_args {
 public:

  Storage_find_by_key_args(const Storage_find_by_key_args&);
  Storage_find_by_key_args& operator=(const Storage_find_by_key_args&);
  Storage_find_by_key_args() noexcept
                           : key() {
  }

  virtual ~Storage_find_by_key_args() noexcept;
  std::string key;

  _Storage_find_by_key_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const Storage_find_by_key_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const Storage_find_by_key_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Storage_find_by_key_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Storage_find_by_key_pargs {
 public:


  virtual ~Storage_find_by_key_pargs() noexcept;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Storage_find_by_key_result__isset {
  _Storage_find_by_key_result__isset() : success(false) {}
  bool success :1;
} _Storage_find_by_key_result__isset;

class Storage_find_by_key_result {
 public:

  Storage_find_by_key_result(const Storage_find_by_key_result&);
  Storage_find_by_key_result& operator=(const Storage_find_by_key_result&);
  Storage_find_by_key_result() noexcept
                             : success() {
  }

  virtual ~Storage_find_by_key_result() noexcept;
  std::string success;

  _Storage_find_by_key_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Storage_find_by_key_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Storage_find_by_key_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Storage_find_by_key_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Storage_find_by_key_presult__isset {
  _Storage_find_by_key_presult__isset() : success(false) {}
  bool success :1;
} _Storage_find_by_key_presult__isset;

class Storage_find_by_key_presult {
 public:


  virtual ~Storage_find_by_key_presult() noexcept;
  std::string* success;

  _Storage_find_by_key_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Storage_dump_args__isset {
  _Storage_dump_args__isset() : file_name(false) {}
  bool file_name :1;
} _Storage_dump_args__isset;

class Storage_dump_args {
 public:

  Storage_dump_args(const Storage_dump_args&);
  Storage_dump_args& operator=(const Storage_dump_args&);
  Storage_dump_args() noexcept
                    : file_name() {
  }

  virtual ~Storage_dump_args() noexcept;
  std::string file_name;

  _Storage_dump_args__isset __isset;

  void __set_file_name(const std::string& val);

  bool operator == (const Storage_dump_args & rhs) const
  {
    if (!(file_name == rhs.file_name))
      return false;
    return true;
  }
  bool operator != (const Storage_dump_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Storage_dump_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Storage_dump_pargs {
 public:


  virtual ~Storage_dump_pargs() noexcept;
  const std::string* file_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Storage_dump_result {
 public:

  Storage_dump_result(const Storage_dump_result&) noexcept;
  Storage_dump_result& operator=(const Storage_dump_result&) noexcept;
  Storage_dump_result() noexcept {
  }

  virtual ~Storage_dump_result() noexcept;

  bool operator == (const Storage_dump_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Storage_dump_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Storage_dump_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Storage_dump_presult {
 public:


  virtual ~Storage_dump_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Storage_load_args__isset {
  _Storage_load_args__isset() : file_name(false) {}
  bool file_name :1;
} _Storage_load_args__isset;

class Storage_load_args {
 public:

  Storage_load_args(const Storage_load_args&);
  Storage_load_args& operator=(const Storage_load_args&);
  Storage_load_args() noexcept
                    : file_name() {
  }

  virtual ~Storage_load_args() noexcept;
  std::string file_name;

  _Storage_load_args__isset __isset;

  void __set_file_name(const std::string& val);

  bool operator == (const Storage_load_args & rhs) const
  {
    if (!(file_name == rhs.file_name))
      return false;
    return true;
  }
  bool operator != (const Storage_load_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Storage_load_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Storage_load_pargs {
 public:


  virtual ~Storage_load_pargs() noexcept;
  const std::string* file_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Storage_load_result {
 public:

  Storage_load_result(const Storage_load_result&) noexcept;
  Storage_load_result& operator=(const Storage_load_result&) noexcept;
  Storage_load_result() noexcept {
  }

  virtual ~Storage_load_result() noexcept;

  bool operator == (const Storage_load_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Storage_load_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Storage_load_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Storage_load_presult {
 public:


  virtual ~Storage_load_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class StorageClient : virtual public StorageIf {
 public:
  StorageClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  StorageClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void insert(const std::string& key, const std::string& val) override;
  void send_insert(const std::string& key, const std::string& val);
  void recv_insert();
  void update_by_key(const std::string& key, const std::string& val) override;
  void send_update_by_key(const std::string& key, const std::string& val);
  void recv_update_by_key();
  void delete_by_key(const std::string& key) override;
  void send_delete_by_key(const std::string& key);
  void recv_delete_by_key();
  void find_by_key(std::string& _return, const std::string& key) override;
  void send_find_by_key(const std::string& key);
  void recv_find_by_key(std::string& _return);
  void dump(const std::string& file_name) override;
  void send_dump(const std::string& file_name);
  void recv_dump();
  void load(const std::string& file_name) override;
  void send_load(const std::string& file_name);
  void recv_load();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class StorageProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<StorageIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (StorageProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_insert(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_by_key(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delete_by_key(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_find_by_key(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dump(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_load(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  StorageProcessor(::std::shared_ptr<StorageIf> iface) :
    iface_(iface) {
    processMap_["insert"] = &StorageProcessor::process_insert;
    processMap_["update_by_key"] = &StorageProcessor::process_update_by_key;
    processMap_["delete_by_key"] = &StorageProcessor::process_delete_by_key;
    processMap_["find_by_key"] = &StorageProcessor::process_find_by_key;
    processMap_["dump"] = &StorageProcessor::process_dump;
    processMap_["load"] = &StorageProcessor::process_load;
  }

  virtual ~StorageProcessor() {}
};

class StorageProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  StorageProcessorFactory(const ::std::shared_ptr< StorageIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< StorageIfFactory > handlerFactory_;
};

class StorageMultiface : virtual public StorageIf {
 public:
  StorageMultiface(std::vector<std::shared_ptr<StorageIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~StorageMultiface() {}
 protected:
  std::vector<std::shared_ptr<StorageIf> > ifaces_;
  StorageMultiface() {}
  void add(::std::shared_ptr<StorageIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void insert(const std::string& key, const std::string& val) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->insert(key, val);
    }
    ifaces_[i]->insert(key, val);
  }

  void update_by_key(const std::string& key, const std::string& val) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_by_key(key, val);
    }
    ifaces_[i]->update_by_key(key, val);
  }

  void delete_by_key(const std::string& key) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delete_by_key(key);
    }
    ifaces_[i]->delete_by_key(key);
  }

  void find_by_key(std::string& _return, const std::string& key) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->find_by_key(_return, key);
    }
    ifaces_[i]->find_by_key(_return, key);
    return;
  }

  void dump(const std::string& file_name) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dump(file_name);
    }
    ifaces_[i]->dump(file_name);
  }

  void load(const std::string& file_name) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->load(file_name);
    }
    ifaces_[i]->load(file_name);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class StorageConcurrentClient : virtual public StorageIf {
 public:
  StorageConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  StorageConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void insert(const std::string& key, const std::string& val) override;
  int32_t send_insert(const std::string& key, const std::string& val);
  void recv_insert(const int32_t seqid);
  void update_by_key(const std::string& key, const std::string& val) override;
  int32_t send_update_by_key(const std::string& key, const std::string& val);
  void recv_update_by_key(const int32_t seqid);
  void delete_by_key(const std::string& key) override;
  int32_t send_delete_by_key(const std::string& key);
  void recv_delete_by_key(const int32_t seqid);
  void find_by_key(std::string& _return, const std::string& key) override;
  int32_t send_find_by_key(const std::string& key);
  void recv_find_by_key(std::string& _return, const int32_t seqid);
  void dump(const std::string& file_name) override;
  int32_t send_dump(const std::string& file_name);
  void recv_dump(const int32_t seqid);
  void load(const std::string& file_name) override;
  int32_t send_load(const std::string& file_name);
  void recv_load(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
